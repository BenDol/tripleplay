//
// Triple Play - utilities for use in PlayN-based games
// Copyright (c) 2011-2012, Three Rings Design, Inc. - All rights reserved.
// http://github.com/threerings/tripleplay/blob/master/LICENSE

package tripleplay.util;

import pythagoras.f.Point;
import pythagoras.f.Rectangle;

import playn.core.Image;
import playn.core.ImageLayer;
import playn.core.Json;

/**
 * A frames implementation that uses a packed texture atlas and metadata generated by the {@code
 * FramePacker}.
 */
public class PackedFrames implements Frames
{
    public PackedFrames (Image source, Json.Object meta) {
        _source = source;
        _width = meta.getInt("width");
        _height = meta.getInt("height");

        // TODO: support skipping frames (right now we assume the frames in the json array are
        // exactly frames 0 to length-1)
        Json.Array frames = meta.getArray("frames");
        _frames = new Frame[frames.length()];
        for (int ii = 0; ii < _frames.length; ii++) {
            Json.Object frame = frames.getObject(ii);
            Json.TypedArray<Float> off = frame.getArray("off", Float.class);
            Json.TypedArray<Float> src = frame.getArray("src", Float.class);
            _frames[frame.getInt("idx")] = new Frame(
                new Point(off.get(0), off.get(1)),
                new Rectangle(src.get(0), src.get(1), src.get(2), src.get(3)));
        }
    }

    @Override public int width () {
        return _width;
    }

    @Override public int height () {
        return _height;
    }

    @Override public int count () {
        return _frames.length;
    }

    @Override public Image frame (int index) {
        Rectangle b = _frames[index].bounds;
        return _source.subImage(b.x, b.y, b.width, b.height);
    }

    @Override public Point offset (int index) {
        return _frames[index].offset;
    }

    @Override public void apply (int index, ImageLayer layer) {
        Frame f = _frames[index];
        layer.setTranslation(f.offset.x, f.offset.y);
        Image cur = layer.image();
        if (cur instanceof Image.Region) {
            Image.Region curr = (Image.Region)cur;
            if (curr.parent() == _source) {
                curr.setBounds(f.bounds.x, f.bounds.y, f.bounds.width, f.bounds.height);
                return;
            }
        }
        layer.setImage(frame(index));
    }

    protected static class Frame {
        public final Point offset;
        public final Rectangle bounds;

        public Frame (Point offset, Rectangle bounds) {
            this.offset = offset;
            this.bounds = bounds;
        }
    }

    protected final Image _source;
    protected final int _width, _height;
    protected final Frame[] _frames;
}
